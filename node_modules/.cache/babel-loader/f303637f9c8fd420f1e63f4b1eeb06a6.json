{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Data\\\\react js\\\\my-app\\\\src\\\\About.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSprings, animated, to as interpolate } from '@react-spring/web';\nimport { useDrag } from 'react-use-gesture';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cards = ['https://images.pexels.com/photos/4203842/pexels-photo-4203842.jpeg?auto=compress&cs=tinysrgb&w=600', 'https://images.pexels.com/photos/995978/pexels-photo-995978.jpeg?auto=compress&cs=tinysrgb&w=600', 'https://images.pexels.com/photos/5010780/pexels-photo-5010780.jpeg?auto=compress&cs=tinysrgb&w=600', 'https://images.pexels.com/photos/4992382/pexels-photo-4992382.jpeg?auto=compress&cs=tinysrgb&w=600', 'https://images.pexels.com/photos/4823732/pexels-photo-4823732.jpeg?auto=compress&cs=tinysrgb&w=600', 'https://images.pexels.com/photos/3405555/pexels-photo-3405555.png?auto=compress&cs=tinysrgb&w=600']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = _i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  _s();\n\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n\n  const [props, api] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n  const bind = useDrag(_ref => {\n    let {\n      args: [index],\n      down,\n      movement: [mx],\n      direction: [xDir],\n      velocity\n    } = _ref;\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    api.start(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? mx : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = mx / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => {\n      gone.clear();\n      api.start(i => to(i));\n    }, 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.map((_ref2, i) => {\n      let {\n        x,\n        y,\n        rot,\n        scale\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(animated.div, {\n        className: \"deck\",\n        style: {\n          x,\n          y\n        },\n        children: /*#__PURE__*/_jsxDEV(animated.div, { ...bind(i),\n          style: {\n            transform: interpolate([rot, scale], trans),\n            backgroundImage: `url(${cards[i]})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false);\n}\n\n_s(Deck, \"gPgtqT3jb+n4ODjZyBvRwGZGcDc=\", false, function () {\n  return [useSprings, useDrag];\n});\n\n_c = Deck;\nexport default function About() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(Deck, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_c2 = About;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Deck\");\n$RefreshReg$(_c2, \"About\");","map":{"version":3,"names":["React","useState","useSprings","animated","to","interpolate","useDrag","cards","i","x","y","scale","rot","Math","random","delay","from","_i","trans","r","s","Deck","gone","Set","props","api","length","bind","args","index","down","movement","mx","direction","xDir","velocity","trigger","dir","add","start","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage","About"],"sources":["E:/Web Data/react js/my-app/src/About.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useSprings, animated, to as interpolate } from '@react-spring/web'\r\nimport { useDrag } from 'react-use-gesture'\r\n\r\nconst cards = [\r\n  'https://images.pexels.com/photos/4203842/pexels-photo-4203842.jpeg?auto=compress&cs=tinysrgb&w=600',\r\n  'https://images.pexels.com/photos/995978/pexels-photo-995978.jpeg?auto=compress&cs=tinysrgb&w=600',\r\n  'https://images.pexels.com/photos/5010780/pexels-photo-5010780.jpeg?auto=compress&cs=tinysrgb&w=600',\r\n  'https://images.pexels.com/photos/4992382/pexels-photo-4992382.jpeg?auto=compress&cs=tinysrgb&w=600',\r\n  'https://images.pexels.com/photos/4823732/pexels-photo-4823732.jpeg?auto=compress&cs=tinysrgb&w=600',\r\n  'https://images.pexels.com/photos/3405555/pexels-photo-3405555.png?auto=compress&cs=tinysrgb&w=600',\r\n]\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = (i: number) => ({\r\n  x: 0,\r\n  y: i * -4,\r\n  scale: 1,\r\n  rot: -10 + Math.random() * 20,\r\n  delay: i * 100,\r\n})\r\nconst from = (_i: number) => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r: number, s: number) =>\r\n  `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, api] = useSprings(cards.length, i => ({\r\n    ...to(i),\r\n    from: from(i),\r\n  })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useDrag(({ args: [index], down, movement: [mx], direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    api.start(i => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? mx : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = mx / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return {\r\n        x,\r\n        rot,\r\n        scale,\r\n        delay: undefined,\r\n        config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 },\r\n      }\r\n    })\r\n    if (!down && gone.size === cards.length)\r\n      setTimeout(() => {\r\n        gone.clear()\r\n        api.start(i => to(i))\r\n      }, 600)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return (\r\n    <>\r\n      {props.map(({ x, y, rot, scale }, i) => (\r\n        <animated.div className=\"deck\" key={i} style={{ x, y }}>\r\n          {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n          <animated.div\r\n            {...bind(i)}\r\n            style={{\r\n              transform: interpolate([rot, scale], trans),\r\n              backgroundImage: `url(${cards[i]})`,\r\n            }}\r\n          />\r\n        </animated.div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function About() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Deck />\r\n    </div>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}