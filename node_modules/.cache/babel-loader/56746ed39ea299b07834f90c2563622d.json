{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\n\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n\n  const newValue = newFactor[key];\n\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\n\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generatedCanvas = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n      this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  destroy() {\n    var _a;\n\n    if (this._generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n\n    return cb(this._context);\n  }\n\n  drawParticle(particle, delta) {\n    var _a;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n\n    if (!fColor) {\n      fColor = pfColor;\n    }\n\n    if (!sColor) {\n      sColor = psColor;\n    }\n\n    if (!fColor && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      var _a, _b, _c, _d, _e;\n\n      const options = this.container.actualOptions,\n            zIndexOptions = particle.options.zIndex,\n            zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n            opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n            strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity,\n            zOpacity = opacity * zOpacityFactor,\n            zStrokeOpacity = strokeOpacity * zOpacityFactor,\n            transform = {},\n            colorStyles = {\n        fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n      };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  init() {\n    this.resize();\n\n    this._initStyle();\n\n    this._initCover();\n\n    this._initTrail();\n\n    this.initBackground();\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  initPlugins() {\n    this._resizePlugins = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n\n  loadCanvas(canvas) {\n    var _a;\n\n    if (this._generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this._generatedCanvas = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generatedCanvas;\n    this.element = canvas;\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    this._applyResizePlugins();\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyResizePlugins() {\n    var _a;\n\n    for (const plugin of this._resizePlugins) {\n      (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n    }\n  }\n\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  _initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = rangeColorToRgb(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n\n  _initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    if (options.fullScreen.enable) {\n      this._originalStyle = deepExtend({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  _initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = rangeColorToRgb(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this._trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  _resetOriginalStyle() {\n    const element = this.element,\n          originalStyle = this._originalStyle;\n\n    if (element && originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n  }\n\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","deepExtend","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generatedCanvas","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","options","actualOptions","trail","particles","move","backgroundMask","enable","paint","length","_trailFillColor","_paintBase","draw","ctx","destroy","element","remove","_resetOriginalStyle","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_b","_c","_d","_e","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","opacity","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","transform","colorStyles","fill","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","initBackground","initUpdaters","initPlugins","background","elementStyle","style","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","fullScreen","setProperty","toString","fillColor","baseColor","originalStyle","top","left"],"sources":["E:/Web Data/react js/my-app/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generatedCanvas = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n            this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d, _e;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    init() {\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        this._initTrail();\n        this.initBackground();\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generatedCanvas =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generatedCanvas;\n        this.element = canvas;\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        var _a;\n        for (const plugin of this._resizePlugins) {\n            (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (options.fullScreen.enable) {\n            this._originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = rangeColorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this._trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (element && originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}