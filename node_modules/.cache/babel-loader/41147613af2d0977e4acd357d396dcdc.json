{"ast":null,"code":"function getItemsFromInitializer(container, map, initializers) {\n  let force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let res = map.get(container);\n\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n\n  return res;\n}\n\nexport class Plugins {\n  constructor(engine) {\n    this._engine = engine;\n    this.plugins = [];\n    this.interactorsInitializers = new Map();\n    this.moversInitializers = new Map();\n    this.updatersInitializers = new Map();\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n\n  addInteractor(name, initInteractor) {\n    this.interactorsInitializers.set(name, initInteractor);\n  }\n\n  addParticleMover(name, initMover) {\n    this.moversInitializers.set(name, initMover);\n  }\n\n  addParticleUpdater(name, initUpdater) {\n    this.updatersInitializers.set(name, initUpdater);\n  }\n\n  addPathGenerator(type, pathGenerator) {\n    if (!this.getPathGenerator(type)) {\n      this.pathGenerators.set(type, pathGenerator);\n    }\n  }\n\n  addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n\n  addPreset(presetKey, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (override || !this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n\n  addShapeDrawer(type, drawer) {\n    if (!this.getShapeDrawer(type)) {\n      this.drawers.set(type, drawer);\n    }\n  }\n\n  destroy(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n\n  getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of this.plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.interactors, this.interactorsInitializers, force);\n  }\n\n  getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.movers, this.moversInitializers, force);\n  }\n\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n\n  getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.updaters, this.updatersInitializers, force);\n  }\n\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  loadParticlesOptions(container, options) {\n    const updaters = this.updaters.get(container);\n\n    if (!updaters) {\n      return;\n    }\n\n    for (var _len = arguments.length, sourceOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      sourceOptions[_key - 2] = arguments[_key];\n    }\n\n    for (const updater of updaters) {\n      if (updater.loadOptions) {\n        updater.loadOptions(options, ...sourceOptions);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["getItemsFromInitializer","container","map","initializers","force","res","get","values","t","set","Plugins","constructor","engine","_engine","plugins","interactorsInitializers","Map","moversInitializers","updatersInitializers","interactors","movers","updaters","presets","drawers","pathGenerators","addInteractor","name","initInteractor","addParticleMover","initMover","addParticleUpdater","initUpdater","addPathGenerator","type","pathGenerator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","presetKey","options","override","getPreset","addShapeDrawer","drawer","getShapeDrawer","destroy","delete","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","preset","getSupportedShapes","keys","getUpdaters","loadOptions","sourceOptions","loadParticlesOptions","updater"],"sources":["E:/Web Data/react js/my-app/node_modules/tsparticles-engine/esm/Core/Utils/Plugins.js"],"sourcesContent":["function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nexport class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this.interactorsInitializers = new Map();\n        this.moversInitializers = new Map();\n        this.updatersInitializers = new Map();\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this.interactorsInitializers.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this.moversInitializers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this.updatersInitializers.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        if (!this.getPathGenerator(type)) {\n            this.pathGenerators.set(type, pathGenerator);\n        }\n    }\n    addPlugin(plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    }\n    addPreset(presetKey, options, override = false) {\n        if (override || !this.getPreset(presetKey)) {\n            this.presets.set(presetKey, options);\n        }\n    }\n    addShapeDrawer(type, drawer) {\n        if (!this.getShapeDrawer(type)) {\n            this.drawers.set(type, drawer);\n        }\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this.interactorsInitializers, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this.moversInitializers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this.updatersInitializers, force);\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            if (updater.loadOptions) {\n                updater.loadOptions(options, ...sourceOptions);\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,uBAAT,CAAiCC,SAAjC,EAA4CC,GAA5C,EAAiDC,YAAjD,EAA8E;EAAA,IAAfC,KAAe,uEAAP,KAAO;EAC1E,IAAIC,GAAG,GAAGH,GAAG,CAACI,GAAJ,CAAQL,SAAR,CAAV;;EACA,IAAI,CAACI,GAAD,IAAQD,KAAZ,EAAmB;IACfC,GAAG,GAAG,CAAC,GAAGF,YAAY,CAACI,MAAb,EAAJ,EAA2BL,GAA3B,CAAgCM,CAAD,IAAOA,CAAC,CAACP,SAAD,CAAvC,CAAN;IACAC,GAAG,CAACO,GAAJ,CAAQR,SAAR,EAAmBI,GAAnB;EACH;;EACD,OAAOA,GAAP;AACH;;AACD,OAAO,MAAMK,OAAN,CAAc;EACjBC,WAAW,CAACC,MAAD,EAAS;IAChB,KAAKC,OAAL,GAAeD,MAAf;IACA,KAAKE,OAAL,GAAe,EAAf;IACA,KAAKC,uBAAL,GAA+B,IAAIC,GAAJ,EAA/B;IACA,KAAKC,kBAAL,GAA0B,IAAID,GAAJ,EAA1B;IACA,KAAKE,oBAAL,GAA4B,IAAIF,GAAJ,EAA5B;IACA,KAAKG,WAAL,GAAmB,IAAIH,GAAJ,EAAnB;IACA,KAAKI,MAAL,GAAc,IAAIJ,GAAJ,EAAd;IACA,KAAKK,QAAL,GAAgB,IAAIL,GAAJ,EAAhB;IACA,KAAKM,OAAL,GAAe,IAAIN,GAAJ,EAAf;IACA,KAAKO,OAAL,GAAe,IAAIP,GAAJ,EAAf;IACA,KAAKQ,cAAL,GAAsB,IAAIR,GAAJ,EAAtB;EACH;;EACDS,aAAa,CAACC,IAAD,EAAOC,cAAP,EAAuB;IAChC,KAAKZ,uBAAL,CAA6BN,GAA7B,CAAiCiB,IAAjC,EAAuCC,cAAvC;EACH;;EACDC,gBAAgB,CAACF,IAAD,EAAOG,SAAP,EAAkB;IAC9B,KAAKZ,kBAAL,CAAwBR,GAAxB,CAA4BiB,IAA5B,EAAkCG,SAAlC;EACH;;EACDC,kBAAkB,CAACJ,IAAD,EAAOK,WAAP,EAAoB;IAClC,KAAKb,oBAAL,CAA0BT,GAA1B,CAA8BiB,IAA9B,EAAoCK,WAApC;EACH;;EACDC,gBAAgB,CAACC,IAAD,EAAOC,aAAP,EAAsB;IAClC,IAAI,CAAC,KAAKC,gBAAL,CAAsBF,IAAtB,CAAL,EAAkC;MAC9B,KAAKT,cAAL,CAAoBf,GAApB,CAAwBwB,IAAxB,EAA8BC,aAA9B;IACH;EACJ;;EACDE,SAAS,CAACC,MAAD,EAAS;IACd,IAAI,CAAC,KAAKC,SAAL,CAAeD,MAAM,CAACE,EAAtB,CAAL,EAAgC;MAC5B,KAAKzB,OAAL,CAAa0B,IAAb,CAAkBH,MAAlB;IACH;EACJ;;EACDI,SAAS,CAACC,SAAD,EAAYC,OAAZ,EAAuC;IAAA,IAAlBC,QAAkB,uEAAP,KAAO;;IAC5C,IAAIA,QAAQ,IAAI,CAAC,KAAKC,SAAL,CAAeH,SAAf,CAAjB,EAA4C;MACxC,KAAKpB,OAAL,CAAab,GAAb,CAAiBiC,SAAjB,EAA4BC,OAA5B;IACH;EACJ;;EACDG,cAAc,CAACb,IAAD,EAAOc,MAAP,EAAe;IACzB,IAAI,CAAC,KAAKC,cAAL,CAAoBf,IAApB,CAAL,EAAgC;MAC5B,KAAKV,OAAL,CAAad,GAAb,CAAiBwB,IAAjB,EAAuBc,MAAvB;IACH;EACJ;;EACDE,OAAO,CAAChD,SAAD,EAAY;IACf,KAAKoB,QAAL,CAAc6B,MAAd,CAAqBjD,SAArB;IACA,KAAKmB,MAAL,CAAY8B,MAAZ,CAAmBjD,SAAnB;IACA,KAAKkB,WAAL,CAAiB+B,MAAjB,CAAwBjD,SAAxB;EACH;;EACDkD,mBAAmB,CAAClD,SAAD,EAAY;IAC3B,MAAMI,GAAG,GAAG,IAAIW,GAAJ,EAAZ;;IACA,KAAK,MAAMqB,MAAX,IAAqB,KAAKvB,OAA1B,EAAmC;MAC/B,IAAI,CAACuB,MAAM,CAACe,WAAP,CAAmBnD,SAAS,CAACoD,aAA7B,CAAL,EAAkD;QAC9C;MACH;;MACDhD,GAAG,CAACI,GAAJ,CAAQ4B,MAAM,CAACE,EAAf,EAAmBF,MAAM,CAACC,SAAP,CAAiBrC,SAAjB,CAAnB;IACH;;IACD,OAAOI,GAAP;EACH;;EACDiD,cAAc,CAACrD,SAAD,EAA2B;IAAA,IAAfG,KAAe,uEAAP,KAAO;IACrC,OAAOJ,uBAAuB,CAACC,SAAD,EAAY,KAAKkB,WAAjB,EAA8B,KAAKJ,uBAAnC,EAA4DX,KAA5D,CAA9B;EACH;;EACDmD,SAAS,CAACtD,SAAD,EAA2B;IAAA,IAAfG,KAAe,uEAAP,KAAO;IAChC,OAAOJ,uBAAuB,CAACC,SAAD,EAAY,KAAKmB,MAAjB,EAAyB,KAAKH,kBAA9B,EAAkDb,KAAlD,CAA9B;EACH;;EACD+B,gBAAgB,CAACF,IAAD,EAAO;IACnB,OAAO,KAAKT,cAAL,CAAoBlB,GAApB,CAAwB2B,IAAxB,CAAP;EACH;;EACDK,SAAS,CAACD,MAAD,EAAS;IACd,OAAO,KAAKvB,OAAL,CAAa0C,IAAb,CAAmBhD,CAAD,IAAOA,CAAC,CAAC+B,EAAF,KAASF,MAAlC,CAAP;EACH;;EACDQ,SAAS,CAACY,MAAD,EAAS;IACd,OAAO,KAAKnC,OAAL,CAAahB,GAAb,CAAiBmD,MAAjB,CAAP;EACH;;EACDT,cAAc,CAACf,IAAD,EAAO;IACjB,OAAO,KAAKV,OAAL,CAAajB,GAAb,CAAiB2B,IAAjB,CAAP;EACH;;EACDyB,kBAAkB,GAAG;IACjB,OAAO,KAAKnC,OAAL,CAAaoC,IAAb,EAAP;EACH;;EACDC,WAAW,CAAC3D,SAAD,EAA2B;IAAA,IAAfG,KAAe,uEAAP,KAAO;IAClC,OAAOJ,uBAAuB,CAACC,SAAD,EAAY,KAAKoB,QAAjB,EAA2B,KAAKH,oBAAhC,EAAsDd,KAAtD,CAA9B;EACH;;EACDyD,WAAW,CAAClB,OAAD,EAAUmB,aAAV,EAAyB;IAChC,KAAK,MAAMzB,MAAX,IAAqB,KAAKvB,OAA1B,EAAmC;MAC/BuB,MAAM,CAACwB,WAAP,CAAmBlB,OAAnB,EAA4BmB,aAA5B;IACH;EACJ;;EACDC,oBAAoB,CAAC9D,SAAD,EAAY0C,OAAZ,EAAuC;IACvD,MAAMtB,QAAQ,GAAG,KAAKA,QAAL,CAAcf,GAAd,CAAkBL,SAAlB,CAAjB;;IACA,IAAI,CAACoB,QAAL,EAAe;MACX;IACH;;IAJsD,kCAAfyC,aAAe;MAAfA,aAAe;IAAA;;IAKvD,KAAK,MAAME,OAAX,IAAsB3C,QAAtB,EAAgC;MAC5B,IAAI2C,OAAO,CAACH,WAAZ,EAAyB;QACrBG,OAAO,CAACH,WAAR,CAAoBlB,OAApB,EAA6B,GAAGmB,aAAhC;MACH;IACJ;EACJ;;AAjGgB"},"metadata":{},"sourceType":"module"}